#include "sierpinskicurve.h"

short SierpinskiCurve::getN() const
{
    return n;
}

int SierpinskiCurve::getInitialLenght() const
{
    return initialLenght;
}

void SierpinskiCurve::makeCalculation()
{
    // –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    lineLenght = initialLenght / 2 / n; // —á–µ–º –±–æ–ª—å—à–µ –ø–æ—Ä—è–¥–æ–∫ –∫—Ä–∏–≤–æ–π - —Ç–µ–º –º–µ–Ω—å—à–µ —É–∑–æ—Ä
    currentPos.setX(0.0);
    currentPos.setY(0.0);
    nextPos.setX(0.0);
    nextPos.setY(0.0);
    lines.clear();

    // —Å–∞–º –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç—Å—é–¥–∞
    typeA(n); // —Ä–∏—Å—É–µ–º —É—á–∞—Å—Ç–æ–∫ –∫—Ä–∏–≤–æ–π —Ç–∏–ø–∞ –ê
    // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ª–∏–Ω–∏—é –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤–Ω–∏–∑ –∏ –≤–ø—Ä–∞–≤–æ ü°¶
    moveAndSaveLine(lineLenght/(sqrt(2)), lineLenght/(sqrt(2)));
    typeB(n); // —Ä–∏—Å—É–µ–º —É—á–∞—Å—Ç–æ–∫ –∫—Ä–∏–≤–æ–π —Ç–∏–ø–∞ –í
    // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ª–∏–Ω–∏—é –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤–Ω–∏–∑ –∏ –≤–ª–µ–≤–æ ü°ß
    moveAndSaveLine(-lineLenght/(sqrt(2)), lineLenght/(sqrt(2)));
    typeC(n); // —Ä–∏—Å—É–µ–º —É—á–∞—Å—Ç–æ–∫ –∫—Ä–∏–≤–æ–π —Ç–∏–ø–∞ –°
    // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ª–∏–Ω–∏—é –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤–≤–µ—Ä—Ö –∏ –≤–ª–µ–≤–æ ü°§
    moveAndSaveLine(-lineLenght/(sqrt(2)), -lineLenght/(sqrt(2)));
    typeD(n); // —Ä–∏—Å—É–µ–º —É—á–∞—Å—Ç–æ–∫ –∫—Ä–∏–≤–æ–π —Ç–∏–ø–∞ D
    // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ª–∏–Ω–∏—é –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤–≤–µ—Ä—Ö –∏ –≤–ø—Ä–∞–≤–æ ü°•
    moveAndSaveLine(lineLenght/(sqrt(2)), -lineLenght/(sqrt(2)));

    // –¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –ø–æ—Ç–æ–∫—É, —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å
    emit endBuildCurve();
}

void SierpinskiCurve::changeN(int value)
{
    n = value;
}

void SierpinskiCurve::changeInitialLenght(int value)
{
    initialLenght = value;
}

void SierpinskiCurve::moveAndSaveLine(double xOffset, double yOffset)
{
    // —Å–¥–≤–∏–≥–∞–µ–º
    currentPos = nextPos;
    nextPos.setX(nextPos.x() + xOffset);
    nextPos.setY(nextPos.y() + yOffset);
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    lines.append(QLine(currentPos, nextPos));
    // —Å–∏–≥–Ω–∞–ª–∏–º
    emit newLineReady(lines.dequeue());
    // –∑–∞–¥–µ—Ä–∂–∫–∞
    thread()->msleep(pause);
}

void SierpinskiCurve::typeA(short n)
{
    if (n > 0) {
        typeA(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —ç—Ç–æ—Ç –∂–µ —Ç–∏–ø
        // –ª–∏–Ω–∏—è –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤–Ω–∏–∑ –∏ –≤–ø—Ä–∞–≤–æ ü°¶
        moveAndSaveLine(lineLenght/(sqrt(2)), lineLenght/(sqrt(2)));
        typeB(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–∏–ø –í
        // –ª–∏–Ω–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –≤–ø—Ä–∞–≤–æ ->
        moveAndSaveLine(lineLenght * 2, 0);
        typeD(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–∏–ø D
        // –ª–∏–Ω–∏—è –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤–ø—Ä–∞–≤–æ –∏ –≤–≤–µ—Ä—Ö ü°•
        moveAndSaveLine(lineLenght/(sqrt(2)), -lineLenght/(sqrt(2)));
        typeA(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–∏–ø –ê
    }
}

void SierpinskiCurve::typeB(short n)
{
    if (n > 0) {
        typeB(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —ç—Ç–æ—Ç –∂–µ —Ç–∏–ø
        // –ª–∏–Ω–∏—è –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤–Ω–∏–∑ –∏ –≤–ª–µ–≤–æ ü°ß
        moveAndSaveLine(-lineLenght/(sqrt(2)), lineLenght/(sqrt(2)));
        typeC(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–∏–ø C
        // –ª–∏–Ω–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –≤–Ω–∏–∑ ‚Üì
        moveAndSaveLine(0, lineLenght * 2);
        typeA(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–∏–ø A
        // –ª–∏–Ω–∏—è –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤–Ω–∏–∑ –∏ –≤–ø—Ä–∞–≤–æ ü°¶
        moveAndSaveLine(lineLenght/(sqrt(2)), lineLenght/(sqrt(2)));
        typeB(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–∏–ø B
    }
}

void SierpinskiCurve::typeC(short n)
{
    if (n > 0) {
        typeC(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —ç—Ç–æ—Ç –∂–µ —Ç–∏–ø
        // –ª–∏–Ω–∏—è –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤–≤–µ—Ä—Ö –∏ –≤–ª–µ–≤–æ ü°§
        moveAndSaveLine(-lineLenght/(sqrt(2)), -lineLenght/(sqrt(2)));
        typeD(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–∏–ø D
        // –ª–∏–Ω–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –≤–ª–µ–≤–æ ‚Üê
        moveAndSaveLine(-lineLenght * 2, 0);
        typeB(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–∏–ø B
        // –ª–∏–Ω–∏—è –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤–Ω–∏–∑ –∏ –≤–ª–µ–≤–æ ü°ß
        moveAndSaveLine(-lineLenght/(sqrt(2)), lineLenght/(sqrt(2)));
        typeC(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–∏–ø –°
    }
}

void SierpinskiCurve::typeD(short n)
{
    if (n > 0) {
        typeD(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —ç—Ç–æ—Ç –∂–µ —Ç–∏–ø
        // –ª–∏–Ω–∏—è –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤–≤–µ—Ä—Ö –∏ –≤–ø—Ä–∞–≤–æ ü°•
        moveAndSaveLine(lineLenght/(sqrt(2)), -lineLenght/(sqrt(2)));
        typeA(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–∏–ø A
        // –ª–∏–Ω–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –≤–≤–µ—Ä—Ö ‚Üë
        moveAndSaveLine(0, -lineLenght * 2);
        typeC(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–∏–ø C
        // –ª–∏–Ω–∏—è –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤–ª–µ–≤–æ –∏ –≤–≤–µ—Ä—Ö ü°§
        moveAndSaveLine(-lineLenght/(sqrt(2)), -lineLenght/(sqrt(2)));
        typeD(n-1); // –≤–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ç–∏–ø D
    }
}

SierpinskiCurve::SierpinskiCurve(QObject *parent)
    : QObject{parent}
{
    n = 0;
    pause = 32;
    initialLenght = 128;
    currentPos.setX(0.0);
    currentPos.setY(0.0);
    nextPos.setX(0.0);
    nextPos.setY(0.0);
}
